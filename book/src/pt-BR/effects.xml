<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Efeitos</title>

  <section>
    <title>Visão Geral</title>

    <para>jQuery torna trivial adicionar efeitos simples a sua página. Efeitos
    podem usar configurações embutidas, ou fornecer uma duração customizada. Você pode
    também criar animações customizadas de propriedades CSS arbitrárias.</para>

    <para>Para detalhes completos sobre efeitos do jQuery, visite <link
    xlink:href="http://api.jquery.com/category/effects/">http://api.jquery.com/category/effects/</link>.</para>
  </section>

  <section>
    <title>Efeitos Embutidos</title>

    <para>Efeitos frequentemente usados estão embutidos no jQuery como métodos:</para>

    <variablelist>
      <varlistentry>
        <term>$.fn.show</term>

        <listitem>
          <para>Mostra o elemento selecionado.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.hide</term>

        <listitem>
          <para>Esconde o elemente selecionado.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.fadeIn</term>

        <listitem>
          <para>Anima a opacidade dos elementos selecionados para 100%.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.fadeOut</term>

        <listitem>
          <para>Anima a opacidade dos elementos selecionados para 0%.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.slideDown</term>

        <listitem>
          <para>Mostra os elementos selecionados com um deslizamento vertical.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.slideUp</term>

        <listitem>
          <para>Esconde os elementos selecionados com um deslizamento vertical.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.slideToggle</term>

        <listitem>
          <para>Mostra ou esconde os elementos selecionados com um deslizamento vertical,
          dependendo se os elementos atualmente estão
          visíveis.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <example>
      <title>Um uso básico de um efeito embutido</title>

      <programlisting>$('h1').show();</programlisting>
    </example>

    <section>
      <title>Mudando a Duração de Efeitos Embutidos</title>

      <para>Com exceção de <code>$.fn.show</code> e
      <code>$.fn.hide</code>, todos os métodos embutidos são animados ao longo
      de 400ms por default. Mudar a duração de um efeito é
      simples.</para>

      <example>
        <title>Configurando a duração de um efeito</title>

        <programlisting>$('h1').fadeIn(300);      // fade in durante 300ms
$('h1').fadeOut('slow');  // usando uma definição de duração nativa</programlisting>
      </example>

      <section>
        <title>jQuery.fx.speeds</title>

        <para>jQuery tem um objeto em <code>jQuery.fx.speeds</code> que
        contém a velocidade padrão, assim como as configurações para
        <code>"slow"</code> e <code>"fast"</code>.</para>

        <programlisting>velocidades: {
    slow: 600,
    fast: 200,
    // Velocidade padrão
    _default: 400
}</programlisting>

        <para>É possível sobrescrever ou adicionar a este objeto. Por exemplo,
        você pode querer mudar a duração padrão dos efeitos, ou pode
        querer criar suas próprias velocidades de efeitos.</para>

        <example>
          <title>Acrescentando definições de velocidade customizadas
          ao <code>jQuery.fx.speeds</code></title>

          <para><programlisting>jQuery.fx.speeds.blazing = 100;
jQuery.fx.speeds.turtle = 2000;</programlisting></para>
        </example>
      </section>
    </section>

    <section>
      <title>Fazendo algo quando um Efeito tiver Terminado</title>

      <para>Frequentemente, você irá querer executar algum código uma vez que uma animação tenha terminado --
      se você executá-lo antes que a animação tenha terminado, ele pode afetar a qualidade da
	  animação, ou pode remover elementos que são parte da animação.
      <termdef><firstterm>Funções de callback</firstterm> fornecem um jeito de
	  registrar seu interesse em um evento que acontecerá no
      futuro.</termdef> Neste caso, o evento que estaremos repondendo é a
	  conclusão da animação. Dentro da função de callback, a
      palavra-chave <code>this</code> refere-se ao elemento no qual o efeito
	  foi chamado; como se estivéssemos dentro de funções de manipulação de eventos, podemos transformá-lo
	  em um objeto jQuery via <code>$(this)</code>.</para>

      <example>
        <title>Executando código quando uma animação tiver completado</title>

        <para><programlisting>$('div.old').fadeOut(300, function() { $(this).remove(); }); </programlisting></para>
      </example>

      <para>Note que se sua seleção não retorna nenhum elemento, sua
	  callback nunca será executada! Você pode resolver este problema testando se
	  sua seleção retornou algum elemento; se não, você pode só executar a
	  callback imediatamente.</para>

      <example>
        <title>Executa uma callback mesmo se não houver elementos
        para animar</title>

        <programlisting>var $thing = $('#naoexistente');

var cb = function() {
    console.log('pronto!');
};

if ($thing.length) {
    $thing.fadeIn(300, cb);
} else {
    cb();
}</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Custom Effects with <code>$.fn.animate</code></title>

    <para>jQuery makes it possible to animate arbitrary CSS properties via the
    <code>$.fn.animate</code> method. The <code>$.fn.animate</code> method
    lets you animate to a set value, or to a value relative to the current
    value.</para>

    <example>
      <title>Custom effects with <code>$.fn.animate</code></title>

      <programlisting>$('div.funtimes').animate(
    {
        left : "+=50",
        opacity : 0.25
    }, 
    300, // duration
    function() { console.log('done!'); // calback
});</programlisting>
    </example>

    <note>
      <para>Color-related properties cannot be animated with
      <code>$.fn.animate</code> using jQuery out of the box. Color animations
      can easily be accomplished by including the <link
      xlink:href="http://plugins.jquery.com/files/jquery.color.js.txt">color
      plugin</link>. We'll discuss using plugins later in the book.</para>
    </note>

    <section>
      <title>Easing</title>

      <para><termdef><firstterm>Easing</firstterm> describes the manner in
      which an effect occurs -- whether the rate of change is steady, or
      varies over the duration of the animation.</termdef> jQuery includes
      only two methods of easing: swing and linear. If you want more natural
      transitions in your animations, various easing plugins are
      available.</para>

      <para>As of jQuery 1.4, it is possible to do per-property easing when
      using the $.fn.animate method.</para>

      <example>
        <title>Per-property easing</title>

        <programlisting>$('div.funtimes').animate(
    {
        left : [ "+=50", "swing ],
        opacity : [ 0.25, "linear" ]
    },
    300
);</programlisting>
      </example>

      <para>For more details on easing options, see <link
      xlink:href="http://api.jquery.com/animate/">http://api.jquery.com/animate/</link>.</para>
    </section>
  </section>

  <section>
    <title>Managing Effects</title>

    <para>jQuery provides several tools for managing animations.</para>

    <variablelist>
      <varlistentry>
        <term>$.fn.stop</term>

        <listitem>
          <para>Stop currently running animations on the selected
          elements.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.fn.delay</term>

        <listitem>
          <para>Wait the specified number of milliseconds before running the
          next animation.</para>

          <programlisting>$('h1').show(300).delay(1000).hide(300);</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>jQuery.fx.off</term>

        <listitem>
          <para>If this value is true, there will be no transition for
          animations; elements will immediately be set to the target final
          state instead. This can be especially useful when dealing with older
          browsers; you also may want to provide the option to your
          users.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/reveal-hidden-text.xml" xpointer="element(/1)" />

    <xi:include href="exercises/dropdown-menus.xml" xpointer="element(/1)" />

    <xi:include href="exercises/slideshow.xml" xpointer="element(/1)" />
  </section>
</chapter>
