<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Exercises</title>

  <para>Each of these exercises uses the file
  <filename>/exercises/index.html</filename> included in the sample code. This
  file has the jQuery library included at the bottom of the page. For some
  exercises, you’ll be able to work directly in Firebug; for others, you will
  need to include other scripts after the jQuery script tag as directed in the
  individual exercises.</para>

  <para>In some cases, you will need to consult the jQuery documentation in
  order to complete an exercise, as we won’t have covered all of the relevant
  information in the lecture. This is by design; the jQuery library is large,
  and learning to find answers in the documentation is an important part of
  the process.</para>

  <para>Here are a few suggestions for tackling these problems:</para>

  <itemizedlist>
    <listitem>
      <para>First, make sure you thoroughly understand the problem you're
      being asked to solve. Ask questions if the problem isn't clear.</para>
    </listitem>

    <listitem>
      <para>Next, figure out which elements you'll need to access in order to
      solve the problem, and determine how you'll get those elements. Use
      Firebug to verify that you're getting the elements you're after.</para>
    </listitem>

    <listitem>
      <para>Finally, figure out what you need to do with the elements to solve
      the problem. It can be helpful to write comments explaining what you're
      going to do before you try to write the code to do it.</para>
    </listitem>
  </itemizedlist>

  <para>Do not be afraid to make mistakes! Do not try to make your code
  perfect on the first try! Making mistakes and experimenting with solutions
  is part of learning the library, and you’ll be a better developer for it.
  Examples of solutions for these exercises are located in the
  <filename>/solutions</filename> directory in the sample code.</para>

  <section xml:id="exercises.sections.selecting">
    <title>Selecting</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/sandbox.js</filename> or
    work in Firebug to accomplish the following:</para>

    <orderedlist>
      <listitem>
        <para>Select all of the div elements that have a class of
        "module".</para>
      </listitem>

      <listitem>
        <para>Come up with three selectors that you could use to get the third
        item in the #myList unordered list. Which is the best to use?
        Why?</para>
      </listitem>

      <listitem>
        <para>Select the label for the search input using an attribute
        selector.</para>
      </listitem>

      <listitem>
        <para>Figure out how many elements on the page are hidden (hint:
        .length).</para>
      </listitem>

      <listitem>
        <para>Figure out how many image elements on the page have an alt
        attribute.</para>
      </listitem>

      <listitem>
        <para>Select all of the odd table rows in the table body.</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="exercises.sections.traversing">
    <title>Traversing</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/sandbox.js</filename> or
    work in Firebug to accomplish the following:</para>

    <orderedlist>
      <listitem>
        <para>Select all of the image elements on the page; log each image's
        alt attribute.</para>
      </listitem>

      <listitem>
        <para>Select the search input text box, then traverse up to the form
        and add a class to the form.</para>
      </listitem>

      <listitem>
        <para>Select the list item inside #myList that has a class of
        "current" and remove that class from it; add a class of "current" to
        the next list item.</para>
      </listitem>

      <listitem>
        <para>Select the select element inside #specials; traverse your way to
        the submit button.</para>
      </listitem>

      <listitem>
        <para>Select the first list item in the #slideshow element; add the
        class "current" to it, and then add a class of "disabled" to its
        sibling elements.</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="exercises.sections.manipulating">
    <title>Manipulating</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/sandbox.js</filename> or
    work in Firebug to accomplish the following:</para>

    <orderedlist>
      <listitem>
        <para>Add five new list items to the end of the unordered list
        #myList. Hint:</para>

        <programlisting>for (var i = 0; i&lt;5; i++) { ... }</programlisting>
      </listitem>

      <listitem>
        <para>Remove the odd list items</para>
      </listitem>

      <listitem>
        <para>Add another h2 and another paragrap to the last
        div.module</para>
      </listitem>

      <listitem>
        <para>Add another option to the select element; give the option the
        value "Wednesday"</para>
      </listitem>

      <listitem>
        <para>Add a new div.module to the page after the last one; put a copy
        of one of the existing images inside of it.</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="exercises.sections.input-hint">
    <title>Create an Input Hint</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/inputHint.js</filename> or
    work in Firebug. Your task is to use the text of the label for the search
    input to create "hint" text for the search input. The steps are as
    follows:</para>

    <orderedlist>
      <listitem>
        <para>Set the value of the search input to the text of the label
        element</para>
      </listitem>

      <listitem>
        <para>Add a class of "hint" to the search input</para>
      </listitem>

      <listitem>
        <para>Remove the label element</para>
      </listitem>

      <listitem>
        <para>Bind a focus event to the search input that removes the hint
        text and the "hint" class</para>
      </listitem>

      <listitem>
        <para>Bind a blur event to the search input that restores the hint
        text and "hint" class if no search text was entered</para>
      </listitem>
    </orderedlist>

    <para>What other considerations might there be if you were creating this
    functionality for a real site?</para>
  </section>

  <section xml:id="exercises.sections.reveal">
    <title>Reveal Hidden Text</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/blog.js</filename>. Your
    task is to add some interactivity to the blog section of the page. The
    spec for the feature is as follows:</para>

    <itemizedlist>
      <listitem>
        <para>Clicking on a headline in the #blog div should slide down the
        excerpt paragraph</para>
      </listitem>

      <listitem>
        <para>Clicking on another headline should slide down its excerpt
        paragraph, and slide up any other currently showing excerpt
        paragraphs.</para>
      </listitem>
    </itemizedlist>

    <para>Hint: don't forget about the <code>:visible</code> selector!</para>
  </section>

  <section xml:id="exercises.sections.tabbed-navigation">
    <title>Add Tabbed Navigation</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/tabs.js</filename>. Your
    task is to create tabbed navigation for the two div.module elements. To
    accomplish this:</para>

    <orderedlist>
      <listitem>
        <para>Hide all of the modules.</para>
      </listitem>

      <listitem>
        <para>Create an unordered list element before the first module.</para>
      </listitem>

      <listitem>
        <para>Iterate over the modules using <code>$.fn.each</code>. For each
        module, use the text of the h2 element as the text for a list item
        that you add to the unordered list element.</para>
      </listitem>

      <listitem>
        <para>Bind a click even to the list item that:</para>

        <itemizedlist>
          <listitem>
            <para>Shows the related module, and hides any other modules</para>
          </listitem>

          <listitem>
            <para>Adds a class of "current" to the clicked list item</para>
          </listitem>

          <listitem>
            <para>Removes the class "current" from the other list item</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Finally, show the first tab.</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="exercises.sections.dropdown-menus">
    <title>Create Dropdown Menus</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/navigation.js</filename>.
    Your task is to add dropdowns to the main navigation at the top of the
    page.</para>

    <itemizedlist>
      <listitem>
        <para>Hovering over an item in the main menu should show that item's
        submenu items, if any.</para>
      </listitem>

      <listitem>
        <para>Exiting an item should hide any submenu items.</para>
      </listitem>
    </itemizedlist>

    <para>To accomplish this, use the <code>$.fn.hover</code> method to add
    and remove a class from the submenu items to control whether they're
    visible or hidden. (The file at
    <filename>/exercises/css/styles.css</filename> includes the "hover" class
    for this purpose.)</para>
  </section>

  <section xml:id="exercises.sections.slideshow">
    <title>Create a Slideshow</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/slideshow.js</filename>.
    Your task is to take a plain semantic HTML page and enhance it with
    JavaScript by adding a slideshow.</para>

    <orderedlist>
      <listitem>
        <para>Move the #slideshow element to the top of the body.</para>
      </listitem>

      <listitem>
        <para>Write code to cycle through the list items inside the element;
        fade one in, display it for a few seconds, then fade it out and fade
        in the next one.</para>
      </listitem>

      <listitem>
        <para>When you get to the end of the list, start again at the
        beginning.</para>
      </listitem>
    </orderedlist>

    <para>For an extra challenge, create a navigation area under the slideshow
    that shows how many images there are and which image you're currently
    viewing.</para>
  </section>

  <section xml:id="exercises.sections.ajax">
    <title>Load External Content</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/load.js</filename>. Your
    task is to load the content of a blog item when a user clicks on the title
    of the item. </para>

    <orderedlist>
      <listitem>
        <para>Create a target div after the headline for each blog
        post.</para>
      </listitem>

      <listitem>
        <para>Use the <code>$.fn.load</code> method to load
        <filename>/exercises/data/blog.html</filename>; use a selector to
        indicate which elements you need from the file for the given post, and
        load them into the target div.</para>
      </listitem>
    </orderedlist>

    <para>Note that each blog headline in index.html includes a link to the
    post. You'll need to leverage the href of that link to get the proper
    content from blog.html. Once you have the href, here's one way to process
    it into an ID:</para>

    <programlisting>var href = 'blog.html#post1';
var tempArray = href.split('#';
var id = tempArray[1];</programlisting>

    <para>Remember to make liberal use of <code>console.log</code> to make
    sure you're on the right path!</para>
  </section>

  <section xml:id="exercises.sections.json">
    <title>Load Content Using JSON</title>

    <para>Open the file <filename>/exercises/index.html</filename> in your
    browser. Use the file <filename>/exercises/js/specials.js</filename>. Your
    task is to show the user details about the special for a given day when
    the user selects a day from the select dropdown.</para>

    <orderedlist>
      <listitem>
        <para>Append a target div after the form that's inside the #specials
        element; this will be where you put information about the special once
        you receive it.</para>
      </listitem>

      <listitem>
        <para>Bind to the change event of the select element; when the user
        changes the selection, send an Ajax request to
        <filename>/exercises/data/specials.json</filename>.</para>
      </listitem>

      <listitem>
        <para>When the request returns a response, use the value the user
        selected in the select (hint: <code>$.fn.val</code>) to look up
        information about the special in the JSON response.</para>
      </listitem>

      <listitem>
        <para>Add some HTML about the special to the target div you
        created.</para>
      </listitem>

      <listitem>
        <para>Finally, because the form is now Ajax-enabled, remove the submit
        button from the form.</para>
      </listitem>
    </orderedlist>

    <para>Note that we're loading the JSON every time the user changes their
    selection. How could we change the code so we only make the request once,
    and then use a cached response when the user changes their choice in the
    select?</para>
  </section>

  <section xml:id="exercises.sections.sortable-table">
    <title>Make a Table Sortable</title>

    <para>For this exercise, your task is to identify, download, and implement
    a table sorting plugin on the index.html page. When you’re done, all
    columns in the table on the page should be sortable.</para>
  </section>

  <section xml:id="exercises.sections.table-striping">
    <title>Write a Table-Striping Plugin</title>

    <para>Open the file /exercises/index.html in your browser. Use the file
    /exercises/js/tablePlugin.js. Your task is to write a plugin called
    "stripe" that you can call on any table element. When the plugin is called
    on a table element, it should change the color of odd rows in the table
    body to a user-specified color.</para>

    <programlisting>$('#myTable').stripe('#cccccc');</programlisting>

    <para>Don't forget to return the table so other methods can be chained
    after the plugin!</para>
  </section>
</chapter>
