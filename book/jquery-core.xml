<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>jQuery Core</title>

  <section>
    <title><code>$</code> vs <code>$()</code></title>

    <para>Until now, we’ve been dealing entirely with methods that are called
    on a jQuery object. For example: </para>

    <programlisting>$('h1').remove();</programlisting>

    <para>Most jQuery methods are called on jQuery objects as shown above;
    these methods are said to be part of the <code>$.fn</code> namespace, or
    the “jQuery prototype,” and are best thought of as jQuery object methods.
    </para>

    <para>However, there are several methods that do not act on a selection;
    these methods are said to be part of the jQuery namespace, and are best
    thought of as core jQuery methods. </para>

    <para>This distinction can be incredibly confusing to new jQuery users.
    Here’s what you need to remember:</para>

    <itemizedlist>
      <listitem>
        <para>Methods called on jQuery selections are in the <code>$.fn</code>
        namespace, and automatically receive and return the selection as
        this.</para>
      </listitem>

      <listitem>
        <para>Methods in the <code>$</code> namespace are generally
        utility-type methods, and do not work with selections; they are not
        automatically passed any arguments, and their return value will
        vary.</para>
      </listitem>
    </itemizedlist>

    <para> There are a few cases where object methods and core methods have
    the same names, such as <code>$.each</code> and <code>$.fn.each</code>. In
    these cases, be extremely careful when reading the documentation that you
    are exploring the correct method.</para>
  </section>

  <section>
    <title>Utility Methods</title>

    <para>jQuery offers several utility methods in the <code>$</code>
    namespace. These methods are helpful for accomplishing routine programming
    tasks. Below are examples of a few of the utility methods; for a complete
    reference on jQuery utility methods, visit <link
    xlink:href="http://api.jquery.com/category/utilities/">http://api.jquery.com/category/utilities/</link>.</para>

    <variablelist>
      <varlistentry>
        <term>$.trim</term>

        <listitem>
          <para>Removes leading and trailing whitespace.</para>

          <programlisting>$.trim('    lots of extra whitespace    ');
// returns 'lots of extra whitespace'</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.each</term>

        <listitem>
          <para>Iterates over arrays and objects.</para>

          <programlisting>$.each([ 'foo', 'bar', 'baz' ], function(idx, val) {
    console.log('element ' + idx + 'is ' + val);
});

$.each({ foo : 'bar', baz : 'bim' }, function(k, v) {
    console.log(k + ' : ' + v);
});</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.inArray</term>

        <listitem>
          <para>Returns a value's index in an array, or -1 if the value is not
          in the array.</para>

          <programlisting>var myArray = [ 1, 2, 3, 5 ];

if ($.inArray(4, myArray) !== -1) {
    console.log('found it!');
}</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.extend</term>

        <listitem>
          <para>Changes the properties of the first object using the
          properties of subsequent objects.</para>

          <programlisting>var firstObject = { foo : 'bar', a : 'b' };
var secondObject = { foo : 'baz' };

var newObject = $.extend(firstObject, secondObject);
console.log(firstObject.foo); // 'baz'
console.log(newObject.foo);   // 'baz'</programlisting>

          <para>If you don't want to change any of the objects you pass to
          <code>$.extend</code>, pass an empty object as the first
          argument.</para>

          <programlisting>var firstObject = { foo : 'bar', a : 'b' };
var secondObject = { foo : 'baz' };

var newObject = $.extend({}, firstObject, secondObject);
console.log(firstObject.foo); // 'bar'
console.log(newObject.foo);   // 'baz'</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Feature &amp; Browser Detection</title>

    <para>Although jQuery eliminates most JavaScript browser quirks, there are
    still occasions when your code needs to know about the browser
    environment. </para>

    <para>jQuery offers the <code>$.support</code> object, as well as the
    deprecated <code>$.browser</code> object, for this purpose. For complete
    documentation on these objects, visit <link
    xlink:href="http://api.jquery.com/jQuery.support/">http://api.jquery.com/jQuery.support/</link>
    and <link
    xlink:href="http://api.jquery.com/jQuery.browser/">http://api.jquery.com/jQuery.browser/</link>.
    </para>

    <para>The <code>$.support</code> object is dedicated to determining what
    features a browser supports; it is recommended as a more “future-proof”
    method of customizing your JavaScript for different browser environments.
    </para>

    <para>The <code>$.browser</code> object was deprecated in favor of the
    <code>$.support</code> object, but it will not be removed from jQuery
    anytime soon. It provides direct detection of the browser brand and
    version.</para>
  </section>

  <section>
    <title>Avoiding Conflicts with Other Libraries</title>

    <para>If you are using another JavaScript library that uses the
    <code>$</code> variable, you can run into conflicts with jQuery. In order
    to avoid these conflicts, you need to put jQuery in no-conflict mode
    immediately after it is loaded onto the page and before you attempt to use
    jQuery in your page. </para>

    <para>When you put jQuery into no-conflict mode, you have the option of
    assigning a variable name to replace <code>$</code>. </para>

    <example>
      <title>Putting jQuery into no-conflict mode</title>

      <programlisting>&lt;script src="prototype.js"&gt;&lt;/script&gt;
&lt;script src="jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;var $j = jQuery.noConflict();&lt;/script&gt;</programlisting>
    </example>

    <para>You can continue to use the standard <code>$</code> by wrapping your
    code in a self-executing anonymous function; this is a standard pattern
    for plugin authoring, where the author cannot know whether another library
    will have taken over the <code>$</code>.</para>

    <example>
      <title>Using the $ inside a self-executing anonymous function</title>

      <programlisting>&lt;script src="prototype.js"&gt;&lt;/script&gt;
&lt;script src="jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;
jQuery.noConflict();

(function($) {
   // your code here, using the $
})(jQuery);
&lt;/script&gt;</programlisting>
    </example>
  </section>
</chapter>
